#!/bin/bash
THIS="${BASH_SOURCE##*/}"
NAME="${THIS%.*}"
CDIR=$(cd "${BASH_SOURCE%/*}" &>/dev/null; pwd)

# PATH
PATH=/usr/bin:/bin
export PATH

# Run user
declare -r run_username="$(id -un 2>/dev/null)"
declare -r run_user_uid="$(id -u 2>/dev/null)"

# OS Type
declare -r os_type_name=$(
  if [ -n "$(type -P sw_vers 2>/dev/null)" ]
  then os=$(sw_vers -productName)
  else os=$(uname -s)
  fi 2>/dev/null
  os="${os// /}";  echo "${os,,}" || :; )

# Users
usernamelist=""

# Skel template
skeltmpltdir=""

# User homedir template
skel_userdir=""

# Flags: Update skel
updatesystem=0
# Flags: Force update
force_update=0
# Flags: Dry run
mode_dry_run=0
# Flags: Debug on
dehugrun_flg=0

# Term opts
opts_end_flg=0

# Functions
_usage() {
  cat <<_USAGE_
Usage: $THIS [OPTIONS] [username ...]

OPTIONS:
--skel[=/path/to/skel], --update, --force

_USAGE_
  return 0
}

_stdout() {
  local row_data=""
  cat | while IFS= read row_data
  do printf "$THIS: %s" "${row_data}"; echo; done
  return 0
}

_abort() {
  local exitcode=1 &>/dev/null
  [[ ${1} =~ ^[0-9]+$ ]] && {
    exitcode="$1"; shift;
  } &>/dev/null
  echo "ERROR: $@" "(${exitcode:-1})" |_stdout 1>&2
  [ ${exitcode:-1} -le 0 ] || exit ${exitcode:-1}
  return 0
}

command_run() {
  if [ $dry_run_mode -eq 0 ]
  then $@
  else echo "$THIS: $@" || :
  fi
  return $?
}

getuserhomedir() {
  local _usr="$1"; shift
  local _ret=0
  case "${updatesystem}::$_usr" in
  1::SKEL*)
    echo "${skel_userdir}"
    ;;
  *)
    if [ "$run_user_uid" = "0" ]
    then
      [ -n "$(id -un $_usr 2>/dev/null)" ] &&
      su - "$_usr" -c 'cd; pwd' 2>/dev/null
      _ret=$?
    else
      echo "$HOME"
    fi
  esac
  return $_ret
}

skel_get_ents() {
  ( cd "${1:-$skel_userdir}/" 2>/dev/null &&
    case "$(pwd)/" in
    ${skeltmpltdir}/)
      find . -type f 2>/dev/null |
      egrep -v '^([ ]*|[.]+|[.]+/)$' 2>/dev/null |
      egrep '^[.]/(default|'"${os_type_name}"')/.+$' 2>/dev/null |
      sort -u
      ;;
    *)
      find . -type f 2>/dev/null |
      egrep -v '^([ ]*|[.]+|[.]+/)$' 2>/dev/null |
      sort -u
      ;;
    esac; )
  return $?
}

skel_get_populate_path() {
  local _ent="${1}"; shift
  _ent="${_ent#./}"
  _ent="${_ent#default/}"
  _ent="${_ent#${os_type_name}/}"
  case "${_ent}" in
  */dot.*)
    _ent="${_ent//\/dot.//.}"
    ;;
  esac
  [ -z "${_ent}" ] || {
    echo "${_ent}"
  }
  return $?
}

skel_get_dirpath() {
  local _dir="$1"; shift
  case "${_dir}" in
  */*) _dir="${_dir%/*}" ;;
  *)   _dir="" ;;
  esac
  [ -n "$_dir" -a "$_dir" != "." ] && {
    echo "$_dir"
  }
  return $?
}

skel_files_update() {
  local _usr="$1"; shift
  local _tag="$_usr"
  local _uhd=""
  local _row=""
  local _src=""
  local _dst=""
  local _dir=""
  local _ret=0

  case "${_usr}" in
  SKEL)
    _usr="root"
    _uhd="${skel_userdir}"
    ;;
  *)
    if [ -n "$(id -un $_usr 2>/dev/null)" ]
    then _uhd="$(getuserhomedir $_usr 2>/dev/null)"
    else return 1
    fi
    ;;
  esac

  # Print
  echo "$_tag: to-dir='$_uhd'."

  # Each files
  ( cd "$_uhd" 2>/dev/null &&
    cat |
    while IFS= read _row
    do

      _src="$_row"
      _dst=$(skel_get_populate_path "$_src")
      _dir=$(
        if [ ! -d "$_src" ]
        then skel_get_dirpath "$_dst"
        else echo "${_dst}"
        fi; )

      [ -n "$_dir" -a ! -d "$_dir" ] &&
      skel_mkdir "$_usr" "$_dir" && {
        echo "$_tag: Mkdir '$_dir'."
      } || :

      [ ! -d "$_src" ] &&
      skel_copy "$_usr" "$_src" "$_dst" && {
        echo "$_tag: Copying '$_src' to '$_dst'."
      } || :

    done; )

  # Print
  echo "$_tag: done."

  # end
  return $_ret
}

skel_mkdir() {
  local _usr="$1"; shift
  local _dir="$1"; shift

  [ -n "$(id -un $_usr 2>/dev/null)" ] ||
    return 1
  [ -n "$_dir" ] ||
    return 1

  if [ ! -d "$_dir" ]
  then
    command_run mkdir -p "$_dir" && {
      if [ $run_user_uid -eq 0 ]
      then
        _grp="$(id -gn $_usr) 2>/dev/null)"
        command_run chown "${_usr}:${_grp}" "$_dir" 2>/dev/null
      else :
      fi || :
    }
  else :
  fi

  return $?
}

skel_copy() {
  local _usr="$1"; shift
  local _src="$1"; shift
  local _dst="$1"; shift

  [ -n "$(id -un $_usr 2>/dev/null)" ] ||
    return 1
  [ -n "$_src" -a -r "$_src" ] ||
    return 2
  [ -n "$_dst" ] ||
    return 22

  if [ $force_update -ne 0 -o ! -e "$_dst" ]
  then
    command_run cp -f "$_src" "$_dst" 2>/dev/null
  else :
  fi && {
    if [ "${run_user_uid}" = "0" ]
    then
      _grp="$(id -gn $_usr 2>/dev/null)"
      command_run chown "${_usr}:${_grp}" "$_dst" 2>/dev/null
    else :
    fi || :
  }

  return $?
}

# Parse options
while [ $# -gt 0 ]
do
  case "${opts_end_flg}::${1}" in
  0::-skel=*|0::--skel=*)
    if [ ! -d "${1##*skel=}" ]
    then _abort 2 "no such file or directory: '${1}'."
    elif [ -n "${skel_userdir}" ]
    then _abort 1 "Multiple Dirs were specified: '${1}'."
    else skel_userdir="${1##*skel=}"
    fi
    ;;
  0::-update-skel*|0::--update-skel*)
    updatesystem=1
    ;;
  0::-force*|0::--force*)
    force_update=1
    ;;
  0::-D*|0::-debug*|0::--debug*)
    dehugrun_flg=1
    ;;
  0::-n*|0::-dry-run*|0::--dry-run*)
    dry_run_mode=1
    ;;
  0::-h|0::-help*|0::--help*)
    _usage; exit 0
    ;;
  *::--)
    opts_end_flg=$(
      if [ $opts_end_flg -eq 0 ]
      then echo 1
      else echo 0
      fi; )
    ;;
  0::-*)
    ;;
  *)
    echo "${usernamelist}" |
    egrep '^([^ ]+ *| *)'${1}'( *[^ ]+.+| *)$' 1>/dev/null 2>&1 || {
      if [ -n "$(id -un ${1} 2>/dev/null)" ]
      then usernamelist="${usernamelist}${usernamelist:+ }${1}"
      else _abort 13 "no such user: '${1}'."
      fi
    }
    ;;
  esac
  shift
done

# Redirect to filter
exec 1> >(_stdout)

# Prohibits overwriting by redirect and use of undefined variables.
set -Cu

# Enable trace, verbose
[ $dehugrun_flg -eq 0 ] || {
  PS4='>(${THIS}:${LINENO:-?})${FUNCNAME:+:$FUNCNAME()}: '
  export PS4
  set -xv
}

# Check permissions
if [ "${run_user_uid}" != "0" ]
then
  [ $updatesystem -ne 0 ] &&
    _abort 1 "Need SUDO."
  [ -n "${usernamelist}" -a "${usernamelist}" != "${run_username}" ] &&
    _abort 1 "Need SUDO."
fi

# Skel template dir
[ -n "${skeltmpltdir}" ] || {
  skeltmpltdir="$(cd ${CDIR}/../ 2>/dev/null; pwd)/skel.d"
}
declare -r skeltmpltdir

# User homedir template (skel)
[ -n "${skel_userdir}" ] || {
  case "${os_type_name}" in
  macos*)
    if [ "${run_user_uid}" = "0" ]
    then skel_userdir="/System/Library/User Template/Non_localized"
    else skel_userdir="${skeltmpltdir}"
    fi
    ;;
  *)
    skel_userdir="/etc/skel"
    ;;
  esac
}
declare -r skel_userdir

# For OS
case "${os_type_name}" in
macos*)
  [ -d "${skel_userdir}" ] ||
  _abort 2 "no such directory: '${skel_userdir}'."
  if [ "${run_user_uid}" = "0" ]
  then
    [ $updatesystem -eq 0 -o -d "${skeltmpltdir}" ] ||
    _abort 2 "no such directory: '${skeltmpltdir}'."
    [ $updatesystem -eq 0 -o \
      "${skeltmpltdir}" != "${skel_userdir}" ] ||
    _abort 1 "Same '${skeltmpltdir}' and '${skel_userdir}'."
  else :
  fi
  ;;
*)
  [ -d "${skel_userdir}" ] ||
  _abort 2 "no such directory: '${skel_userdir}'."
  [ $updatesystem -eq 0 -o -d "${skeltmpltdir}" ] ||
  _abort 2 "no such directory: '${skeltmpltdir}'."
  [ $updatesystem -eq 0 -o \
    "${skeltmpltdir}" != "${skel_userdir}" ] ||
  _abort 1 "Same '${skeltmpltdir}' and '${skel_userdir}'."
  ;;
esac || :

# Set user name if list is empty
[ $updatesystem -eq 0 -a -z "${usernamelist}" ] && {
  usernamelist="${run_username}"
}

# Setup skelton file(s)
[ $updatesystem -eq 0 ] || {
  skel_get_ents "${skeltmpltdir}" |skel_files_update "SKEL"
}

# Each username
for _usr in ${usernamelist}
do
   # Setup skelton file(s)
  skel_get_ents |skel_files_update "$_usr"
done

# End
exit 0
