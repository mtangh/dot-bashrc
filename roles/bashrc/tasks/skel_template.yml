---
# tasks file for bashrc
# vim: set ff=unix ts=2 sw=2 sts=2 et : This line is VIM modeline

- block:

  - name: "bashrc | skel | Check the 'bash.bashrc.d'."
    fail:
      mag: "User '{{ bashrc_bash_user|d('???') }}' is not present in the this system."
    when: bashrc_bashrcdir_path|d('',true)|trim|length <= 0
          or bashrc_bashrcdir_path|is_dir == false

  - name: "bashrc | skel | Facts - Build facts."
    set_fact:
      bashrc_skel_template_source_path: "{{
        '%s%s'|format(tests_prefix_dir|d('',true),(
        bashrc_skel_template_path|trim
        if bashrc_skel_template_path|d('',true)|trim|length > 0 else
        '%s/skel.d'|format(bashrc_bashrcdir_path)
        ))|realpath }}"
      bashrc_skel_template_install_path: "{{
        '%s%s'|format(tests_prefix_dir|d('',true),(
        bashrc_user_template_path|trim
        if bashrc_user_template_path|d('',true)|trim|length > 0 else
        bashrc_skel_dir|d('%s'|format(
        (bashrc_distribution|match('^macos'))|ternary(
        '/System/Library/User Template/Non_localized','/etc/skel')))
        ))|realpath }}"
      bashrc_skel_template_owner: "{{ tests_owner|d(bashrc_owner,true) }}"
      bashrc_skel_template_group: "{{ tests_group|d(bashrc_group,true) }}"

  tags:
  - always

- block:

  - name: "bashrc | skel | Lookup template files and dirs in {{ bashrc_skel_template_source_path|d('???',true) }}."
    find:
      paths: "{{ bashrc_skel_template_source_path|trim }}"
      recurse: yes
      hidden: yes
    register: _bashrc_skel_find
    ignore_errors: yes
    when: bashrc_skel_template_source_path|d('',true)|trim|length > 0
          and bashrc_skel_template_source_path|trim|is_dir == true

  - name: "bashrc | skel | Convert absolute path to relative path."
    shell: echo {{ _bashrc_skel_find_file.path|regex_replace(
                  ('^%s/(.*)$'|format(bashrc_skel_template_source_path)),
                  '\\1')|trim|quote }}
    with_items: "{{ (_bashrc_skel_find|d({})).files|d([]) }}"
    loop_control:
      loop_var: _bashrc_skel_find_file
    register: _bashrc_skel_ents
    ignore_errors: yes
    when: bashrc_skel_template_source_path|d('',true)|trim|length > 0
          and (_bashrc_skel_find_file|d({})).path|d('',true)|trim|length > 0

  - name: bashrc | skel | Make skel template directories.
    file:
      path: "{{ '%s/%s'|format(
                bashrc_skel_template_install_path,_bashrc_skel_ent.stdout) }}"
      state: directory
      owner: "{{ bashrc_skel_template_owner }}"
      group: "{{ bashrc_skel_template_group }}"
      mode: "{{ bashrc_dir_mode|d('0755',true) }}"
    with_items: "{{ (_bashrc_skel_ents|d({})).results|d([]) }}"
    loop_control:
      loop_var: _bashrc_skel_ent
    when: ((_bashrc_skel_ents|d({})).results|d([]))|length > 0
          and (_bashrc_skel_ent|d({})).stdout|d('',true)|trim|length > 0
          and (_bashrc_skel_ent|d({})).stdout|d('',true)|is_dir == true

  - name: bashrc | skel | Copy skel template files.
    copy:
      src: "{{ '%s/%s'|format(
               bashrc_skel_template_source_path,_bashrc_skel_ent.stdout) }}"
      dest: "{{ '%s/%s%s'|format(
                bashrc_skel_template_install_path,
                (_bashrc_skel_ent.stdout|regex_replace('/[.]dot[._]','.')) }}"
      remote_src: yes
      owner: "{{ bashrc_skel_template_owner }}"
      group: "{{ bashrc_skel_template_group }}"
      mode: "{{ bashrc_file_mode|d('0644',true) }}"
      force: yes
      backup: no
    with_items: "{{ (_bashrc_skel_ents|d({})).results|d([]) }}"
    loop_control:
      loop_var: _bashrc_skel_ent
    when: ((_bashrc_skel_ents|d({})).results|d([]))|length > 0
          and (_bashrc_skel_ent|d({})).stdout|d('',true)|trim|length > 0
          and (_bashrc_skel_ent|d({})).stdout|d('',true)|is_dir == false

  tags:
  - bashrc-skel-template-process-files-and-dirs

