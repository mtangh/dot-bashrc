---
# vim: set ff=unix ts=2 sw=2 sts=2 et : This line is VIM modeline

language: python

python: "2.7"

# Use the new container infrastructure
sudo: true

# Install ansible
addons:
  apt:
    packages:
    - python-pip

install:
  # Check bash version
  - bash --version
  # Install ansible
  - pip install ansible; ansible --version
  ## Create ansible.cfg with correct roles_path
  #- printf '[defaults]\nroles_path=../' >ansible.cfg

script:
  # Scripts:
  - |
    set -x;
    : "syntax-check.sh" && {
      bash -n syntax-check.sh &&
      bash syntax-check.sh
    } &&
    : "OK";

  # Install shell for user
  - |
    set -x;
    : "install.sh for user" && {
      bash -n install.sh &&
      bash install.sh --install --source=$(pwd)/roles/bashrc && {
        ( for check_file in \
            ${HOME}/.config/bash.{bashrc,profile,bash_logout,bash.logout} \
            ${HOME}/.config/bash.bashrc.d/vim/vimrc \
            ${HOME}/.config/bash.bashrc.d/skel.d/default/dot.{bashrc,inputrc,vimrc} \
            ${HOME}/.bashrc ;
          do [ -e "${check_file}" ] && echo "Found - ${check_file}" || exit 1
          done; ) &&
        ( unset os vendor osvendor machine
          . "${HOME}/.config/bash.bashrc" &&
          echo "Load ${HOME}/.config/bash.bashrc" && {
            [ -n "$os"       ] && echo "Found - os=$os"             &&
            [ -n "$vendor"   ] && echo "Found - vendor=$vendor"     &&
            [ -n "$osvendor" ] && echo "Found - osvendor=$osvendor" &&
            [ -n "$machine"  ] && echo "Found - machine=$machine"   &&
            :;
          }; )
      }
    } &&
    : "OK";

  # Install shell for global
  - |
    set -x;
    : "install.sh for global" && {
      bash -n install.sh &&
      sudo bash install.sh -G --install --source=$(pwd)/roles/bashrc && {
        ( for check_file in \
            /etc/{bash.,}{bashrc,profile} \
            /etc/bash.bash{_logout,.logout} \
            /etc/bash.bashrc.d/vim/vimrc \
            /etc/bash.bashrc.d/skel.d/default/dot.{bashrc,inputrc,vimrc};
          do [ -e "${check_file}" ] && echo "Found - ${check_file}" || exit 1
          done; ) &&
        ( unset os vendor osvendor machine
          . "/etc/bash.bashrc" &&
          echo "Load /etc/bash.bashrc" && {
            [ -n "$os"       ] && echo "Found - os=$os"             &&
            [ -n "$vendor"   ] && echo "Found - vendor=$vendor"     &&
            [ -n "$osvendor" ] && echo "Found - osvendor=$osvendor" &&
            [ -n "$machine"  ] && echo "Found - machine=$machine"   &&
            :;
          }; )
      }
    } &&
    : "OK";

  # Basic role syntax check, and tests-run
  - |
    set -x;
    tests_test_run=""
    tests_case_ret=0;
    ansible_play="ansible-playbook -i inventory test.yml"
    cd roles/bashrc/tests/ && {
      echo "ansible-playbook syntax-check." &&
      $ansible_play --syntax-check &&
      echo "ansible-playbook list-tags." &&
      $ansible_play --list-tags &&
      echo "ansible-playbook tests-run." &&
      for tests_casename in $( {
        $ansible_play --list-tags |
        sed -En 's@^[ ]*play[ ]*.*[ ]*TAGS:[ ]*\[([^ ,]+).*\].*$@\1@gp' |
        sort -u; } )
      do
        tests_test_run=yes
        echo "ansible-playbook tests-run [$tests_casename]."
        $ansible_play -e tests_run=yes --tags "${tests_casename}" ||
        tests_case_ret=$?
      done &&
      [ -n "${tests_test_run}" ] &&
      [ ${tests_case_ret:-1} -eq 0 ];
    } &&
    : "OK";

# Notifications
#notifications:
#  email:
#  - your@emailaddress

