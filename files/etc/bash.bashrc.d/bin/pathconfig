#!/bin/bash
THIS="${BASH_SOURCE##*/}"
NAME="${THIS%.*}"
CDIR=$(cd "${BASH_SOURCE%/*}" &>/dev/null; pwd)

##
## Internal variables
##
MODE=""
PRNT=""
FRCE=0
TARG=""
NEWP=""
BUFF=""
ARGV=""
XTRC=0

##
## functions
##

# Remove trailing separator
_remove_trail_slash() {
  local _lst="${1}"; shift
  _lst="${_lst//\/\//\/}"; _lst="${_lst%/}"; _lst="${_lst//\/:/:}"
  echo "${_lst}"
  return $?
}

# Convert relative path to absolute path
_relative_to_absolute_path() {
  local _dir=$(_remove_trail_slash "$1"); shift
  ( cd "${_dir}" 1>/dev/null 2>&1 &&
    pwd || echo "${_dir}"; )
  return $?
}

# Check exist path string
_path_exist() {
  _path_remove "${1}" "${2}" 1>/dev/null 2>&1
  return $?
}

# Path remove
_path_remove() {
  local _lst=$(_remove_trail_slash "$1"); shift
  local _dir=$(_relative_to_absolute_path "$1"); shift
  local newp="${_lst}"
  newp="${newp#$_dir:}"
  newp="${newp//:${_dir}:/:}"
  newp="${newp%:${_dir}}"
  echo "$newp"
  [ "${_lst}" != "${newp}" ]
  return $?
}

# Add path string
add_path() {
  local _lst=$(_remove_trail_slash "$1"); shift
  local _dir=""
  local newp="${_lst}"
  while [ $# -gt 0 ]
  do
    _dir=$(_relative_to_absolute_path "${1}"); shift
    [ -n "${_dir}" ] || {
      continue; }
    [ $FRCE -eq 0 ] || {
      newp=$(_path_remove "${newp}" "${_dir}"); }
    _path_exist "$newp" "${_dir}" || {
      newp="${newp:+${newp}:}${_dir}"; }
  done
  echo "$newp"
  [ "${_lst}" != "${newp}" ]
  return $?
}

# Insert path
ins_path() {
  local _lst=$(_remove_trail_slash "$1"); shift
  local _dir=""
  local newp="${_lst}"
  local insp=""
  while [ $# -gt 0 ]
  do
    _dir=$(_relative_to_absolute_path "${1}"); shift
    [ -d "${_dir}" ] || {
      continue; }
    [ $FRCE -eq 0 ] || {
      newp=$(_path_remove "${newp}" "${_dir}"); }
    _path_exist "$newp" "${_dir}" ||
    _path_exist "$insp" "${_dir}" || {
      insp="${insp:+${insp}:}${_dir}"; }
  done
  [ -n "${insp}" ] && {
    newp="${insp}${newp+:${newp}}"
  } || :
  echo "${newp}"
  [ "${_lst}" != "${newp}" ]
  return $?
}

# Delete path
del_path() {
  local _lst=$(_remove_trail_slash "$1"); shift
  local _dir=""
  local newp="${_lst}"
  while [ $# -gt 0 ]
  do
    _dir=$(_relative_to_absolute_path "${1}"); shift
    newp=$(_path_remove "${newp}" "${_dir}")
  done
  echo "$newp"
  [ "${_lst}" != "${newp}" ]
  return $?
}

# Modify path environment
mod_path_env() {
  local mode="$1"; shift
  local list="$1"; shift
  case $mode in
  a) add_path "$list" "$@" ;;
  i) ins_path "$list" "$@" ;;
  d) del_path "$list" "$@" ;;
  *) echo "$list" ;;
  esac
  return $?
}

# Print path list
path_list() {
  local _IFS="$IFS"
  local _ent=""
  IFS=":"
  for _ent in ${1}; do
    _remove_trail_slash "${_ent%/}"
  done
  IFS="$_IFS"
  return 0
}

# Usage
usage() {
  cat <<__EOF__
Configuration for PATH environment

Usage: $THIS env_name [OPTION] {-a|-i|-d} path_string ...

[OPTIONS]
-s	shell format
-c	c shell format
-l	list result
-f	force path manipulation
-h	Print this help

__EOF__
  return 0
}

##
## Parse option(s)
##
for ARGV in "$@"
do
  case "$ARGV" in
  -s|-sh|--sh|-c|-csh|--csh|-l|-list|--list)
    if [ -z "$PRNT" ]
    then PRNT="${ARGV#*-}"
    else echo "$THIS: ERROR: Illegal option '$ARGV'" 1>&2; usage; exit 1
    fi
    ;;
  -f|-force|--force) FRCE=1 ;;
  -h|-help|--help)   usage; exit 0 ;;
  -x|-debug|--debug) XTRC=1 ;;
  -a|-i|-d)          break ;;
  -*)
    echo "$THIS: ERROR: Illegal option '$ARGV'" 1>&2; usage; exit 1
    ;;
  *)
    ;;
  esac
done

##
## First argument
##
if [ -n "$1" ]
then TARG="$1"; NEWP="${!TARG}"; shift
else usage; exit 1
fi

# Prohibits overwriting by redirect and use of undefined variables.
set -Cu

# Enable trace, verbose
[ $XTRC -eq 0 ] || {
  PS4='>(${THIS}:${LINENO:--})${FUNCNAME:+:$FUNCNAME()}: '
  export PS4
  set -xv
}

##
## PATH manipulation
##
while [ $# -gt 0 ]
do
  case "${1}" in
  -a|-i|-d)
    [ -z "$BUFF" ] || {
    NEWP=$(mod_path_env $MODE "$NEWP" $BUFF); }
    MODE="${1#*-}"
    BUFF=""
    ;;
  -*)
    ;;
  *)
    if [ -n "$MODE" ]
    then
      BUFF="${BUFF:+$BUFF }${1}"
      [ $# -le 1 ] && {
        NEWP=$(mod_path_env $MODE "$NEWP" $BUFF)
      } || :
    else
      echo "$THIS: ERROR: Illegal option '$1'" 1>&2; usage; exit 1
    fi
    ;;
  esac
  shift
done

##
## Print new value
##
case "$PRNT" in
s|sh)   echo "$TARG="'"'"$NEWP"'"'"; export $TARG" ;;
c|csh)  echo "setenv $TARG "'"'"$NEWP"'"' ;;
l|list) path_list $NEWP ;;
*)      echo "$NEWP" ;;
esac

# end of shell
exit 0
